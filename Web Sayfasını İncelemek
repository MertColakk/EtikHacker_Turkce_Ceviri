Bir Uygulamada Nasıl Yürünür?
Bu yazıda tarayıcınız içinde hazır olarak gelmiş araçların ne anlama geldiğini öğreneceksiniz:
  View Soruce(Kaynakları Göster): Bir websitenin insan tarafından okunabileceği kaynakları görmek için kullanılır.
  Inspector(İzleyici): Bir sitenin elementlerinin nasıl görüleceğini öğreneceksiniz. Bu aşamada eğer sitede bir açık varsa gizlenmiş içeriğin nasıl görülebileceğini öğreneceksiniz.
  Debugger(Hata Ayıklayıcı): Sayfa içerisindeki JavaScriptlerin iletişimini ve akışını öğreneceksiniz.
  Network(Ağ): Sayfanın yaptığı bütün ağ isteklerini görüntülemeyi öğreneceksiniz.

Bir ağ sızma testi uzmanı olarak, bir web uygulamasının veya websitenin sahip olduğu açıkları keşfedip, bu zafiyetlerden yararlanmanız gerekecek. Bu açıkları keşfetme aşamanız genelde sitenin bir kullanıcı ile etkileşim kurduğu aşamadır. Örnek olarak sitenin iletişim kısmından gönderdiğiniz bir form ekranı gösterilebilir. 
Bir sitenin sahip olduğu sayfa örnekleri aşağıdakilerdir:
	1- Home Page(Ana Sayfa)  →  URL: /   → Bir şirketin özeti, şirket fotoğrafı gibi öğeleri içerir.
	2- Latest News(Haberler)   → URL: /news   → Bir şirketin paylaştığı tüm haberler bu sekmede 	görüntülenir. Ayrıca, bilmemiz gereken önemli bir nokta bu sekmede görüntülenen her haber bir 	id number(kimlik numarası) ile eklenir. Örneğin /news/article?id=1
	3- Contact Page(İletişim Sayfası)   → URL: /contact   → Bu sayfa genel olarak şirket ile 	iletişime geçeceğiniz bir form ve gönder butonu içerir.
	4- Costumers(Kullanıcı/Müşteri)   → URL: /costumers   → Bu sayfa kullanıcıların/üyelerin 	kullanacağı bir sayfadır.
	5- Costumer Login(Kullanıcı Giriş)   → URL: /costumers/login   → Bu sayfa 	kullanıcıların/üyelerin giriş yaptığı bir arayüz içerir. Bu arayüz kullanıcı adı, şifre gibi alanlar 	içerir.
	6- Costumer Signup(Kullanıcı Üye Ol)   → URL: /costumer/signup   → Bu sayfa kullanıcının 	üye olacağı bir alan içerir. Bu alan içerisinde kullanıcı adı, şifre, mail gibi elementler içerir.
	7- Create Ticket(Bilet Gönder)   → URL: /costumers/ticket/new   → Bu sayfa kullanıcı giriş 	yaptıktan veya üye olduktan sonra açılan bir sayfadır. Bu sayfada kullanıcı IT destek birimine 	sorunu ile alakalı bir bilet gönderir ve sorununu anlatır. 
	8- Costumer Logout(Çıkış Yap)   → URL: /costumers/logout   → Bu sayfa giriş yapan 	kullanıcının müşteri için olan alanından çıkış yapmasını sağlar.

Sayfa Kaynaklarının Görüntülenmesi
	Sayfa kaynakları, insan tarafından yazılıp anlaşılan kodları, kullanıcı her bir istek yolladığı zaman tarayıcının ve istemcinin anlayacağı bir forma döndürür. Bu döndürülmüş kodlar HTML, CSS ve JavaScript formatında olur. JavaScript, genel olarak sayfaya hangi içeriğin gösterileceğini, interaktif olarak nelerin ekleneceği gibi bilgileri iletir. Bu başlıktaki amacımız sayfanın kaynaklarını görmek ve bu kaynaklar ile beraber ağ uygulamalarını öğrenmek. Sayfa Kaynaklarını görüntelemenin temek olarak üç basit yolu bulunmakta, bunlar:
	1- Bir websitedeyken, sayfaya sağ tıklayıp, açılan panelden Wiev Page Source(Sayfa 	Kaynaklarını Göster/Görüntüle) butonuna basmak.
	2- Bir çok tarayıcının desteklediri URL’in önüne “source:” ibaresini eklemek. Örneğin 	source:https://www.google.com/.
	3- Son olarak da tarayıcının sağ üstünde bulunan ayarlar menüsüne gelerek. Option/Ayarlar 	sekmesine gelip açılan menüden  Wiev Page Source(Sayfa Kaynaklarını Göster/Görüntüle) 	butonuna basarak, sayfanın kaynaklarını görüntüleyebilirsiniz.

Giriş aşamamızdan sonrasında artık bir sitenin kaynaklarını inceleyebiliriz. Bu yazıdan bir şeyleri tamamen anlamanız mümkün olmayacağı için, bir website tasarımı/geliştirmesi kursu almanızı öneriririm. Bu yazıda genel olarak bilinmesi gereken önemli bilgilerin verileceğini bilmenizi isterim.
	Bir websitesinin kaynak kodlarını açtığınız zaman “<!--” ile başlayıp “--!>” ile biten bir kod parçağı göreceksiniz. 
  Bu kod parçacığı o sitenin geliştiricisi tarafından başka alandaki meslektaşlarına bilgi vermek için kullandığı veya kendisine o siteyi geliştirirken bir hatırlatıcı olarak kullandığı, comment(yorum) satırıdır. Link(bağlantı) kısmına geldiğimizde ise “<a” ile başlayan bir kod göreceksiniz bu kod içerisine link yazdığınız HTML kodudur. 
  Bu kod ile bir yere bağlantı vermek isterseniz yazdığınız “<a” kodunun yanına “href= /contact>” eklerseniz iletişim kısmına gidecektir. 
  Tam açıklayıcı örnek olarak “<a href=”/contact>İletişim</a>” verilebilir. Açık aradığınız bir siteye girdiğinizde bu link için kullanılan kod(<a>)a dikkat etmelisiniz çünkü eğer geliştirici gizli olan bağlantıları saklamadıysa bu bir açıktır ve siz bu durumdan yararlanabilirsiniz. Eğer açık aradığınız sitede JavaScript,CSS ve görseller gibi dosyalar aynı kaynak klasörü içinde saklanıyorsa bu bir Configration Error(Yapılandırma Hatası)dür. Tabii ki bazı durumlarda bu bir problem değildir. Kaynaklar klasöründe bulunan dosyalar public(açık) bir şekilde görüntülenebilir fakat bazı durumlarda bu dosyalar içerisinde kaynak kodu, yedekleme dosyaları gibi önemli dosyalar bulunabilir. 
  Bizim aradığımız açıklar bu gibi dosyalardır.
	Günümüzde websiteleri artık Scratch(Bir yazılım dili) tarafından yapılmıyor. Bunun yerine framework denilen bir yapı kullanmaktalar. Framework, blog, kullanıcı yönetimi gibi bir websitenin sahip olduğu veya ihtiyacı olan özellikleri eklemek veya düzenlemek gibi geliştiricilere kolaylıklar sağlayan, önceden ulaşılabilir ve entegre etmesi kolay bir arayüz sunan araca denir. Framework, kağıt üstünde çok güzel bir araç olarak gözükse de eğer hangi framework ile yapıldığını bulabilirsek. Versiyonlara bağlı olarak zafiyetleri saptayabilir ve bunu çıkarlarımız adına kullanabilir. Bu yüzden de düzgün düzenlenmezse veya yapımında özen gösterilmemişse tehlikeli bir araç haline gelebilir.

Developer Tools
Neredeyse her modern tarayıcı, geliştiricilerin, geliştirdikleri sitelerdeki hataları ayıklayabilmesi için bir developer tools(geliştirici araçları) içerir. Bu araç sayesinde bir setede nelerin olup bittiğini anlayabilirsiniz. Bir sızma testi uzmanı olarak, bu aracı kendi menfaatimiz için kullanarak ağ uygulamalarını daha iyi anlamaya çalışacağız. Genel olarak biz bu başlık altında Inspector(İzleyici), Debugger(Hata Ayıklayıcı) ve Network(Ağ) araçlarını inceleyeceğiz. Geliştirici araçları her tarayıcıda farklı açılabileceği için araştırmanızı tavsiye ederim. Bu yazıda belirtip yazı kalabalığı yapmak istemiyorum. Anlayışınız için teşekkürler.
1. Araç – Inspector(İzleyici): Sayfa kaynakları, CSS, JavaScript ve kullanıcı etkileşimleri gibi sebeppkerden kaynaklı her zaman site içerisindeki işleyişi anlatmaz bu gibi durumların önüne geçmek için Inspector aracını kullanmaktayız.  Bu canlı görüntülenmeyi incelerken, aynı zamanda geliştiricilerin yardım aldığı hata ayıklama sıkıntılarını  gözlemleyebilir, sayfayı düzenleyebilir, sayfa elementleri ile etkileşime girebiliriz. Örneğin bir sayfada üç tane makale olsun ikisi kullancılar tarafından görüntülenebilir iken üçüncüsü görüntülenemez olsun. Bu makaleyi izleyici içerisindeki bir kod değişikliği ile görüntülenebilir hale getirmemiz mümkündür.
2. Araç – Debugger(Hata Ayıklayıcı): Geliştirici araçlarındaki bu panel, JavaScript'te hata ayıklamak için tasarlanmıştır ve yine bir şeyin neden çalışmayabileceğini öğrenmek isteyen web geliştiricileri için mükemmel bir özelliktir. Ancak sımza test edicileri olarak, bize JavaScript kodunun derinliklerine inme seçeneği sunar. Firefox ve Safari'de bu özelliğe Hata Ayıklayıcı denir, ancak Google Chrome'da Kaynaklar olarak adlandırılır.
3. Araç – Network(Ağ): Ağ aracı, web sayfasının yaptığı her harici isteği takip etmemizi sağlar.  Eğer Network(Ağ) kısmına basarsanız ve ardından sayfayı yenilerseniz. Sayfanın yaptığı isteklerin bağlantılı olduğu tüm dosyaları görebilirsiniz. 
